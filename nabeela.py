# -*- coding: utf-8 -*-
"""Nabeela.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NE6z87TK_V1YkXz9_WyXxRK64bllN36N

# Research on advanced placement Computer science Principles: Searching for equity in a two tiered solution to under representation
# (Quantitative Data Analysis)
"""

# unzipping data file
import zipfile
with zipfile.ZipFile('archive.zip', 'r') as zip_ref:
    zip_ref.extractall()

# Importing necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import chi2_contingency
from sklearn.linear_model import LinearRegression
from scipy.stats import f_oneway
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Loading data files
Exams = pd.read_csv('exams.csv')
Students = pd.read_csv('students.csv')

# Data info about Exams
print(Exams.info())

# Data info about Students
print(Students.info())

# Printing First few rows about Exams
Exams.head()

# Printing First few rows about Students
Students.head()

# Printing last few rows about Exams
Exams.tail()

# Printing last few rows about Students
Students.tail()

# Descriptive Statistics about Exams
Exams.describe()

# Descriptive Statistics about Students
Students.describe()

# Null values Data about Exams
print(Exams.isnull().sum())

# Null values Data about Students
print(Students.isnull().sum())

# Handling missing values
Students.fillna(0, inplace=True)
Exams.fillna(0, inplace=True)

# Data columns of Exams
print(Exams.columns)

# Data columns of Students
print(Students.columns)

# Printing the Numerical Data columns
ExamsNumCol = Exams.select_dtypes(include=['float', 'int']).columns
print("Numerical columns in Exams:", ExamsNumCol)
StudentsNumCol = Students.select_dtypes(include=['float', 'int']).columns
print("\nNumerical columns in Students:", StudentsNumCol)

# Printing the Categorical columns
ExamsCatCol = Exams.select_dtypes(include=['object']).columns
print("Categorical columns in Exams:", ExamsCatCol)
StudentsCatCol = Students.select_dtypes(include=['object']).columns
print("\nCategorical columns in Students:", StudentsCatCol)

# Converting columns into another data types
Students['Exam Subject'] = Students['Exam Subject'].astype(str)
Exams['Exam Subject'] = Exams['Exam Subject'].astype(str)

# Plotting total students by grade
grades = ['Students (9th Grade)', 'Students (10th Grade)', 'Students (11th Grade)', 'Students (12th Grade)']
Students[grades].plot(kind='bar')
plt.xlabel('Grade Level')
plt.ylabel('Number of Students')
plt.title('Number of Students by Grade')
plt.show()

# Plotting scores distribution
Exams['Score'].value_counts().plot(kind='bar')
plt.xlabel('Score')
plt.ylabel('Frequency')
plt.title('Distribution of Exam Scores')
plt.show()

# If the dataset includes time-series data
Students[['All Students (2015)', 'All Students (2016)', '% Change 2015-2016']].plot(kind='line')
plt.xlabel('Year')
plt.ylabel('Number of Students')
plt.title('Change in Student Enrollment Over Time')
plt.show()

"""# Performing Chi-Square Test"""

ContingencyTable = pd.crosstab(Students['Exam Subject'], Students['Students (Male)'])
chiStats, p_val, dof, ex = chi2_contingency(ContingencyTable)
print(f"Chi-Square Statistic: {chiStats}, P-value: {p_val}")

"""# Performing oneway Anova Testing"""

# Converting columns to numeric
Numcolumns = ['Students (11th Grade)', 'Students (12th Grade)', 'Students (Male)',
                'Students (Female)', 'Students (White)', 'Students (Black)',
                'Students (Hispanic/Latino)', 'Students (Asian)',
                'Students (American Indian/Alaska Native)',
                'Students (Native Hawaiian/Pacific Islander)',
                'Students (Two or More Races)', 'All Students (2016)', 'Score']
for col in Numcolumns:
    Exams[col] = pd.to_numeric(Exams[col], errors='coerce')

# Checking the data type
print(Exams.dtypes)

# Checking null values in exams
print(Exams.isnull().sum())

# Removing null values
Exams = Exams.dropna(subset=['Score', 'Students (American Indian/Alaska Native)', 'Students (Native Hawaiian/Pacific Islander)', 'Students (Black)'])

# Grouping scores by different racial categories
Whites = Exams[Exams['Students (White)'] > 0]['Score'].dropna()
Blacks = Exams[Exams['Students (Black)'] > 0]['Score'].dropna()
Hispanics = Exams[Exams['Students (Hispanic/Latino)'] > 0]['Score'].dropna()

# Printing the results of ANOVA testing
f_stat, p_val = f_oneway(Whites, Blacks, Hispanics)
print(f"F-Statistic: {f_stat}, P-value: {p_val}")

"""# Performing Modelling"""

# Setting features and targetted variable
features = Students[['Students (9th Grade)', 'Students (10th Grade)',
                        'Students (11th Grade)', 'Students (12th Grade)',
                        'Students (Male)', 'Students (Female)',
                        'Students (White)', 'Students (Black)',
                        'Students (Hispanic/Latino)', 'Students (Asian)',
                        'Students (American Indian/Alaska Native)',
                        'Students (Native Hawaiian/Pacific Islander)',
                        'Students (Two or More Races)']]

target = Students['All Students (2016)']

# Removing null values
features = features.fillna(0)
target = target.fillna(0)

# trainig a Linear regression model
model = LinearRegression()

# Converting features and target to numeric
features = features.apply(pd.to_numeric, errors='coerce').fillna(0)
target = target.apply(pd.to_numeric, errors='coerce').fillna(0)

# Fitting a Linear regression model
model.fit(features, target)

# Printing model's coefficients
print("Coefficients:", model.coef_)
print("\nIntercept:", model.intercept_)